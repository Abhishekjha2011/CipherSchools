package strings;
public class StringStudy
{
public static void main(String[] args)
{
String name = "CipherSchools"; //created using  string literals -stored in method area
String name2 = "CipherSchools";
String name3 = new String("CipherSchools"); //creating string using constructors
String name4 = new String("CipherSchools");
System.out.println(name==name2);//== operator compares refrences for object and values for premetive data type
System.out.println(name3==name4);
System.out.println(name==name3);

//String are immutable
//Everything we do an operation on a string, a new object is created

System.out.println("===================================");
System.out.println("1.CONCATENATION" );
//1. Concatenation

 String s1 = "Hello";
 s1 = s1 + "Peeps";
System.out.println(s1);
System.out.println(s1 + ", How are you doing ?");
System.out.println(s1); //s1 remain same because

//Another way to concat is to use funct
String s2 = new String("Hello");
String s3 = new String("People");
String s4 = s2.concat(s3);
System.out.println(s4);
System.out.println(s2); //remaining same

System.out.println("==========================================");
System.out.println("2.CHECKING IF STRINGS ARE EQUAL IN VALUE");
      //2.CHECKING IF STRINGS ARE EQUAL IN VALUE

 System.out.println(name.equals(name2));
//Equals Function -> Object class
//This generally compares refrences(hashcodes) of objects(just like ==)
//But, for String class it has been overriden to check for content equality

System.out.println("==============================================");
System.out.println("3)Creating new String object from character array");
//3)Creating new String object from character array
char arr[] = {'C','I','P','H','E','R'};
String strFromArr = new String(arr); //Constructor overloaded
System.out.println(strFromArr);

   }
} 
